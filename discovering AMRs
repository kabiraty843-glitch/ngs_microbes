#making a new directory for easy access
mkdir ngs_microbes
#making a new directory where raw files will be and changing it to the working directory
mkdir raw_files && cd raw_files
#downloading the bash script that contains all 100 genomes
wget  https://raw.githubusercontent.com/HackBio-Internship/2025_project_collection/refs/heads/main/SA_Polony_100_download.sh
#viewing the script
nano SA_Polony_100_download.sh
#downloading the paired end reads
bash SA_Polony_100_download.sh
#making a new scipt to carry out fastqc on all the genomes
nano qc.sh


#contents of the bash script
#!/bin/bash
mkdir qc     #making a new directory where the outputs will be
for sample in *.fastq.gz;  #for any content that has fastq.qz attached to it
do
       fastqc -o qc "$sample"   #run fastqc on it and put the output in qc
done
#executing qc.sh
nano qc.sh
#making a new bash script where trimming of paired end reads by fastp will take place
nano trim.sh


#contents of the bash script
#!/bin/bash
mkdir -p trimmed  #make a new directory named trimmed

for r1 in *_1.fastq.gz;     #this starts a loop with r taking the value of each file in raw_files that end in _1.fastq.gz
do
        r2="${r1/_1.fastq.gz/_2.fastq.gz}"      #this finds the matching ‘2’ file by replacing _1.fastq.gz with  _2.fastq.gz
        sample=$(basename "$r1" _1.fastq.gz) #extracts just the sample name
        fastp \
          -i "$r1" \      #input 1
          -I "$r2" \       #input 2
          -o "trimmed/${sample}_1.trimmed.fastq.gz" \    #trimmed output 1
          -O "trimmed/${sample}_2.trimmed.fastq.gz"      #trimmed output 2

done
#executing the bash script
bash trim.sh
#writing a new bash script to perform De-novo assembly with spades.py
nano assembly.sh


#contents of the bash script
#!/bin/bash

# Create the output directory
mkdir -p assembly

# Loop through all trimmed R1 fastq files
for r1_file in trimmed/*_1.trimmed.fastq.gz; do

    # Get the corresponding R2 file by replacing '_1' with '_2'
    r2_file=${r1_file/_1.trimmed.fastq.gz/_2.trimmed.fastq.gz}

    # Extract the sample name from the R1 filename
    sample_name=$(basename "${r1_file}" "_1.trimmed.fastq.gz")

    # Check if the corresponding R2 file exists
    if [[ -f "$r2_file" ]]; then
        echo "Starting assembly #$((count + 1)) for sample: ${sample_name}"
        spades.py –phred-offset -1 "$r1_file" -2 "$r2_file" -o "assembly/${sample_name}"
        
        echo "Warning: R2 file not found for ${r1_file}. Skipping."
    fi
done
#copy the assembly graph into local machine with scp
scp afolabi@135.181.163.242:/home/afolabi/kabirat/ngs_microbes/raw_files/assembly/SRR27013147_Genome_Sequencing_of_Listeria_monocytogenes_SA_outbreak_2017/assembly_graph.fastg ~/graph
#after this the graph is downloaded into the computer system and visualized with bandage, from here, a part of the genome is copied and pasted on the blast interface where it is identified as Listeria monocytogenes
#bash script to perform abricates on contigs.fasta gottrn from spades.py




#!/bin/bash

# Define the output directory for your abricate results
OUTPUT_DIR="AMRs"
mkdir -p "$OUTPUT_DIR"

# Loop through all directories starting with "SRR"
for sample_dir in SRR*/; do

    # Get the base name of the directory (e.g., 'SRR27013147...')
    sample_name=$(basename "$sample_dir")

    echo "Processing sample: $sample_name"

    # Define the path to the contigs.fasta file inside the directory
    # The -n option checks if the file exists and is not empty
    if [ -n "$(find "$sample_dir" -name 'contigs.fasta')" ]; then
        contig_path=$(find "$sample_dir" -name 'contigs.fasta')
        
        # Run abricate on the contigs file, redirecting output to the results directory
        abricate "$contig_path" > "$OUTPUT_DIR/${sample_name}_abricate.tsv"

        echo "Analysis for $sample_name complete."
    else
        echo "ERROR: 'contigs.fasta' not found in $sample_dir. Skipping."
    fi

done

echo "All samples analyzed. Results are in the '$OUTPUT_DIR' directory."
cd AMRs
#view results
abricate –summary AMRs/*.tsv  > AMR_report_tab
#After this, two AMRs were identified; Fosfomycin resistant thiol transferase and lincomycin resistance ABC-F type ribosomal protection proteins. These genes pose significant clinical challenges. FosX inactivates fosfomycin, a last-resort antibiotic. The ABC-F protein protects the ribosome, making it resistant to lincomycin and related drugs. The presence of these genes severely limits antibiotic treatment options for infections caused by this pathogen.
#create a file to input the suitable antibiotics
nano antibiotics.txt
Based on the identified AMR genes (FosX and lincomycin resistance ABC-F type ribosomal protection protein), ampicillin or penicillin G are the most suitable antibiotics. These beta-lactams are the standard of care for Listeria monocytogenes and are unaffected by the identified resistance mechanisms.
For severe infections, a combination with an aminoglycoside like gentamicin can provide a synergistic effect.
Importantly, the bioinformatic analysis confirms that fosfomycin and lincomycin should be avoided as they would be ineffective. Similarly, all cephalosporins should be avoided due to the bacteria's inherent resistance.
#view to confirm the file is as it should
cat antibiotics.txt
#create a new file for the report


nano report on ngs_microbes.txt
Raw reads from a clinical Listeria monocytogenes isolate were first trimmed to remove adapters and low-quality bases. The trimmed reads were then de novo assembled into contiguous sequences (contigs) using SPAdes with a manually specified Phred offset of 33. The quality of the assembly was assessed, and the resulting contigs were screened for antimicrobial resistance (AMR) genes using ABRicate. The presence and coverage of identified genes were then summarized.
Results
Bioinformatics analysis identified two key antimicrobial resistance genes in the Listeria monocytogenes isolate:
Fosfomycin resistance thiol transferase (FosX): This gene, conferring resistance to the antibiotic fosfomycin, was detected with 100% identity and coverage.
Lincomycin resistance ABC-F type ribosomal protection protein: This gene, providing resistance to lincomycin and other macrolide-lincosamide-streptogramin B (MLS$_{B}$) antibiotics, was also identified with 100% identity and coverage.
Public Health Discussion
The identification of these two resistance genes has significant public health and clinical implications. Fosfomycin is a crucial last-resort antibiotic for treating multidrug-resistant infections, particularly urinary tract infections. The presence of the FosX gene in this Listeria isolate means that fosfomycin would be ineffective as a treatment option, reducing the available arsenal of drugs.
Similarly, the ABC-F type ribosomal protection protein provides resistance to lincomycin, an antibiotic often considered for gram-positive infections. This resistance mechanism protects the bacterial ribosome from multiple classes of antibiotics, highlighting a broader challenge to treatment.
Based on the AMR profile, the recommended first-line therapy for an infection caused by this strain would be a beta-lactam antibiotic, such as ampicillin or penicillin G, potentially combined with an aminoglycoside like gentamicin for synergy. These are effective against Listeria and are not affected by the identified resistance genes. It is critical to note that the common practice of using cephalosporins for meningitis and other infections is not applicable here, as Listeria monocytogenes is inherently resistant to this entire class of antibiotics.
In conclusion, this report underscores the importance of genomic surveillance in guiding clinical decisions. By identifying specific AMR genes, we can avoid ineffective treatments and ensure that patients receive the most appropriate and evidence-based care, thereby helping to combat the global threat of antimicrobial resistance.
#confirm if the file is as it should
cat ngs_report.txt
